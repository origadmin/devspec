#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

REGEX="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(\w+[/]?\w+\))?:\s(\S|\w)+"
MERGE_REGEX="^Merge (branch|tag)*"
ERROR_MSG="Commit message irregular，Please check!"
ERROR_MSG_TOOLONG="Commit message too long，Please show me more detail"
SUCCESS_MSG="Commit success!"
while read -r oldrev newrev refname ; do
for COMMIT in $(git rev-list "$oldrev".."$newrev")
do
MESSAGE=$(git cat-file commit "$COMMIT" | sed '1,/^$/d')
echo "Checking: $MESSAGE"

if ! echo "$MESSAGE" | grep -iqE "$MERGE_REGEX"; then
continue
fi

if ! echo "$MESSAGE" | grep -iqE "$REGEX"; then
echo "$ERROR_MSG: $MESSAGE" >&2
exit 1
fi

if [ ${#MESSAGE} -gt 72 ]; then
echo "$ERROR_MSG_TOOLONG(${#MESSAGE}):$MESSAGE" >&2
exit 1
fi

done
done
echo "$SUCCESS_MSG"
exit 0